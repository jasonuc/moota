/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SeedsImport } from './routes/seeds'
import { Route as PlantsImport } from './routes/plants'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'

// Create/Update Routes

const SeedsRoute = SeedsImport.update({
  id: '/seeds',
  path: '/seeds',
  getParentRoute: () => rootRoute,
} as any)

const PlantsRoute = PlantsImport.update({
  id: '/plants',
  path: '/plants',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/plants': {
      id: '/plants'
      path: '/plants'
      fullPath: '/plants'
      preLoaderRoute: typeof PlantsImport
      parentRoute: typeof rootRoute
    }
    '/seeds': {
      id: '/seeds'
      path: '/seeds'
      fullPath: '/seeds'
      preLoaderRoute: typeof SeedsImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/plants': typeof PlantsRoute
  '/seeds': typeof SeedsRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/plants': typeof PlantsRoute
  '/seeds': typeof SeedsRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/plants': typeof PlantsRoute
  '/seeds': typeof SeedsRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/plants' | '/seeds' | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/plants' | '/seeds' | '/dashboard'
  id: '__root__' | '/' | '/plants' | '/seeds' | '/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlantsRoute: typeof PlantsRoute
  SeedsRoute: typeof SeedsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlantsRoute: PlantsRoute,
  SeedsRoute: SeedsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/plants",
        "/seeds",
        "/dashboard/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/plants": {
      "filePath": "plants.tsx"
    },
    "/seeds": {
      "filePath": "seeds.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
