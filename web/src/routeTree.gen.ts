/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SeedsImport } from './routes/seeds'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as IndexImport } from './routes/index'
import { Route as PlantsIndexImport } from './routes/plants/index'
import { Route as AuthRegisterImport } from './routes/_auth/register'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as PlantsPlantIdIndexImport } from './routes/plants/$plantId/index'

// Create/Update Routes

const SeedsRoute = SeedsImport.update({
  id: '/seeds',
  path: '/seeds',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlantsIndexRoute = PlantsIndexImport.update({
  id: '/plants/',
  path: '/plants/',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

const PlantsPlantIdIndexRoute = PlantsPlantIdIndexImport.update({
  id: '/plants/$plantId/',
  path: '/plants/$plantId/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/seeds': {
      id: '/seeds'
      path: '/seeds'
      fullPath: '/seeds'
      preLoaderRoute: typeof SeedsImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthRouteImport
    }
    '/plants/': {
      id: '/plants/'
      path: '/plants'
      fullPath: '/plants'
      preLoaderRoute: typeof PlantsIndexImport
      parentRoute: typeof rootRoute
    }
    '/plants/$plantId/': {
      id: '/plants/$plantId/'
      path: '/plants/$plantId'
      fullPath: '/plants/$plantId'
      preLoaderRoute: typeof PlantsPlantIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/seeds': typeof SeedsRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/plants': typeof PlantsIndexRoute
  '/plants/$plantId': typeof PlantsPlantIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/seeds': typeof SeedsRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/plants': typeof PlantsIndexRoute
  '/plants/$plantId': typeof PlantsPlantIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/seeds': typeof SeedsRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/plants/': typeof PlantsIndexRoute
  '/plants/$plantId/': typeof PlantsPlantIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/dashboard'
    | '/seeds'
    | '/login'
    | '/register'
    | '/plants'
    | '/plants/$plantId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/dashboard'
    | '/seeds'
    | '/login'
    | '/register'
    | '/plants'
    | '/plants/$plantId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/dashboard'
    | '/seeds'
    | '/_auth/login'
    | '/_auth/register'
    | '/plants/'
    | '/plants/$plantId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  SeedsRoute: typeof SeedsRoute
  PlantsIndexRoute: typeof PlantsIndexRoute
  PlantsPlantIdIndexRoute: typeof PlantsPlantIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  DashboardRoute: DashboardRoute,
  SeedsRoute: SeedsRoute,
  PlantsIndexRoute: PlantsIndexRoute,
  PlantsPlantIdIndexRoute: PlantsPlantIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/dashboard",
        "/seeds",
        "/plants/",
        "/plants/$plantId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/login",
        "/_auth/register"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/seeds": {
      "filePath": "seeds.tsx"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/plants/": {
      "filePath": "plants/index.tsx"
    },
    "/plants/$plantId/": {
      "filePath": "plants/$plantId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
